name: Automated Tests

on:
  workflow_call:
    # Define the outputs for the reusable workflow
    outputs:
      image_tag:
        description: "The docker image tag of the built test image"
        value: ${{ jobs.build-and-push.outputs.image_tag }}
  push:
    branches: [dev]

# Define environment variables at the top level
env:
  MODELS_DIR: ${{ vars.MODELS_DIR || '/app/models' }}
  CAT_DOG_OTHER_CLASSIFIER:
    ${{ vars.CAT_DOG_OTHER_CLASSIFIER || 'cat-dog-other-classifier' }}
  API_VERSION: ${{ vars.API_VERSION || 'v1' }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push base image to GHCR
  build-and-push:
    runs-on: ubuntu-latest
    # Set permissions needed for GHCR
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check disk space before
        run: |
          df -h
          du -sh /home/runner/* | sort -hr | head -10

      - name: Clean Docker resources
        run: |
          docker system prune -af --volumes

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=deps-,format=short
            type=sha,prefix=test-,format=short

      # Build and push dev-dependencies stage to GHCR
      - name: Build and push dependencies image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dev-dependencies
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deps-${{ github.sha }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Build and push unit-test stage to GHCR
      - name: Build and push unit-test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: unit-test
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SKIP_POETRY_INSTALL_FOR_LIGHTER_TESTS=true

      - name: Check disk space after
        run: |
          df -h
          docker images
    outputs:
      image_tag: ${{env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}

  # Run unit tests using the pushed image
  unit-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read

    steps:
      - name: Check disk space before
        run: |
          df -h

      - name: Clean Docker resources
        run: |
          docker system prune -af --volumes

      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create .env file for Docker to use
      - name: Create Docker environment file
        run: |
          # Create the Docker env file with only required vars for unit tests
          echo "MODELS_DIR=${{ env.MODELS_DIR }}" > .env-docker
          echo "TEST_MODELS_DIR=${{ env.MODELS_DIR }}/test" >> .env-docker
          echo "CAT_DOG_OTHER_CLASSIFIER=${{ env.CAT_DOG_OTHER_CLASSIFIER }}" >> .env-docker
          echo "USE_LOCAL_MODEL_REPO=true" >> .env-docker
          echo "TESTING=true" >> .env-docker

      - name: Run unit tests
        run: |
          # Pull the image from GHCR
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}

          # Print Python version and environment variables
          docker run --rm --env-file .env-docker ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }} python -c "import os, sys; print(f'Python {sys.version}'); print('ENV:', dict(os.environ))"

          # Run the unit tests
          docker run --rm --env-file .env-docker ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}

      - name: Check disk space after
        run: |
          df -h
          docker images
