name: Deploy to ECS
on:
  # Deploy only when pushing to main
  push:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Add top-level permissions for the whole workflow
permissions:
  contents: read
  packages: write

jobs:
  # First check if tests are passing using the existing CI workflow
  verify-tests:
    uses: ./.github/workflows/test.yml

  # Deploy to ECR and ECS
  deploy:
    needs: verify-tests
    runs-on: ubuntu-latest
    environment: CI_CD
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}

    steps:
      - name: Check disk space before
        run: |
          df -h

      - name: Clean Docker resources
        run: |
          docker system prune -af --volumes

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry to pull the previously built image
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the production image to ECR, using GHCR image as cache source
      - name: Build and push production image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: |
            type=gha
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deps-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}
          cache-to: type=gha,mode=min

      - name: Check disk space after build
        run: |
          df -h
          docker images

      # Update the ECS service with the new image
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

      # Wait for deployment to complete and report status
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ECS deployment to complete..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}
          echo "Deployment completed successfully!"

      - name: Check final disk space
        run: |
          df -h
