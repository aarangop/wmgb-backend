name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# Define environment variables at the top level
env:
  # Configuration variables - used both at build time and runtime
  MODELS_DIR: ${{ vars.MODELS_DIR || '/app/models' }}
  CAT_DOG_OTHER_CLASSIFIER:
    ${{ vars.CAT_DOG_OTHER_CLASSIFIER || 'cat-dog-other-classifier' }}
  MODEL_SOURCE: ${{ vars.MODEL_SOURCE || 's3' }}
  API_VERSION: ${{ vars.API_VERSION || 'v1' }}

  # Credentials - used primarily at runtime but might be needed during build
  S3_MODELS_BUCKET: ${{ secrets.S3_MODELS_BUCKET || vars.S3_MODELS_BUCKET }}
  AWS_REGION: ${{ secrets.AWS_REGION || vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  # Build and cache dependency stages
  build-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers between jobs
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and cache dependencies
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dev-dependencies
          tags: wmgb-backend:deps
          load: true
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # This step is necessary to prevent cache from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Run unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: build-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Restore Docker layer cache
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Create .env file for Docker to use
      - name: Create Docker environment file
        run: |
          # Create the Docker env file with only required vars for unit tests
          echo "MODELS_DIR=${{ env.MODELS_DIR }}" > .env-docker
          echo "TEST_MODELS_DIR=${{ env.MODELS_DIR }}/test" >> .env-docker
          echo "CAT_DOG_OTHER_CLASSIFIER=${{ env.CAT_DOG_OTHER_CLASSIFIER }}" >> .env-docker
          echo "USE_LOCAL_MODEL_REPO=true" >> .env-docker
          echo "TESTING=true" >> .env-docker
          echo "MODEL_REPOSITORY_TYPE=local" >> .env-docker

      - name: Build and run unit tests
        uses: docker/build-push-action@v5
        with:
          context: .
          target: unit-test
          tags: wmgb-backend:unit-test
          load: true
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SKIP_POETRY_INSTALL_FOR_LIGHTER_TESTS=true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run unit tests
        run: |
          # Print Python version and environment variables
          docker run --rm --env-file .env-docker wmgb-backend:unit-test python -c "import os, sys; print(f'Python {sys.version}'); print('ENV:', dict(os.environ))"
          # Run the unit tests using docker with environment variables from .env-docker
          docker run --rm --env-file .env-docker wmgb-backend:unit-test -e USE_LOCAL_MODEL_REPO=1

  # Run integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create .env file for Docker to use
      - name: Create Docker environment file
        run: |
          # Create the Docker env file
          echo "MODELS_DIR=${{ env.MODELS_DIR }}" > .env-docker
          echo "CAT_DOG_OTHER_CLASSIFIER=${{ env.CAT_DOG_OTHER_CLASSIFIER }}" >> .env-docker
          echo "MODEL_REPOSITORY_TYPE=caching" >> .env-docker
          echo "USE_LOCAL_MODEL_REPO=false" >> .env-docker
          echo "TESTING=false" >> .env-docker
          echo "S3_MODELS_BUCKET=${{ env.S3_MODELS_BUCKET }}" >> .env-docker
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env-docker
          echo "API_VERSION=${{ env.API_VERSION }}" >> .env-docker
          echo "AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}" >> .env-docker
          echo "AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}" >> .env-docker

      - name: Build and cache integration test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: integration-test
          tags: wmgb-backend:integration-test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run integration tests
        run: |
          # Run the integration tests using docker with environment variables from .env-docker
          docker run --rm --env-file .env-docker wmgb-backend:integration-test
